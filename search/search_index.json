{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Glue Hypergeneral boilerplate manager and task runner","title":"Glue"},{"location":"#glue","text":"Hypergeneral boilerplate manager and task runner","title":"Glue"},{"location":"api/","text":"API For executables ran in actions and tasks , the following environment variables are available glue.toml The glue.toml can be expected to have the following configuration name Name of the project. This is a pretty name using String or array of projectType s to use glue-auto.toml File that contains project specific configuration data only read and updated by scripts version Current Semantic Version of the project Environment Variables GLUE_WD An absolute path to the current project. In other words, the directory that contains the .glue directory GLUE_IS_AUTO Whether or not the currently running script has a parent folder of 'auto'. Has a value of either yes or no . GLUE_BOOTSTRAP The bootstrap commands to be executed when a script under the 'tasks' or 'actions' directory is executed or sourced. This has the contents of the boostrap.* file in your Glue store Directories Certain directories have an intrinsic meaning and should be used as such. All directories are a subdirectory of .glue and should be tracked by your VCS tasks The location Glue looks to execute a particular task. Glue also scans this directory to find useAction() annotations actions The location a script in 'tasks' looks to source to perform a more fine-grained action (ex. run eslint ). Glue also scans this directorie to find useConfig() annotations configs Where config files are stored. Glue doesn't use this file directly, but it copies its contents because your scripts will likely require configuration util Scripts in util contain functionality shared by both scripts in tasks and actions . Glue doesn't use this file directly, but it copies its contents nevertheless output Any output that your scripts may emit. Since this directory is one of the only ones (besides state ) that is not contained in the Glue store, it should not have an auto subdirectory generated Any temporary or permanent files your (action) script may emit. Please namespace all of your files under the action script name. For example, generate under tool-shdoc for actions/tool-shdoc.sh root This file is only present in the Glue store. All files it contains is copied to the .glue/ directories. Primarily, this is used to house a .gitignore for the generated subdirectory Miscellaneous Most script-writing-gotchia's are due to the fact that the script file can reside in either tasks/auto/script.sh or tasks/script.sh","title":"API"},{"location":"api/#api","text":"For executables ran in actions and tasks , the following environment variables are available","title":"API"},{"location":"api/#gluetoml","text":"The glue.toml can be expected to have the following configuration","title":"glue.toml"},{"location":"api/#name","text":"Name of the project. This is a pretty name","title":"name"},{"location":"api/#using","text":"String or array of projectType s to use","title":"using"},{"location":"api/#glue-autotoml","text":"File that contains project specific configuration data only read and updated by scripts","title":"glue-auto.toml"},{"location":"api/#version","text":"Current Semantic Version of the project","title":"version"},{"location":"api/#environment-variables","text":"","title":"Environment Variables"},{"location":"api/#glue_wd","text":"An absolute path to the current project. In other words, the directory that contains the .glue directory","title":"GLUE_WD"},{"location":"api/#glue_is_auto","text":"Whether or not the currently running script has a parent folder of 'auto'. Has a value of either yes or no .","title":"GLUE_IS_AUTO"},{"location":"api/#glue_bootstrap","text":"The bootstrap commands to be executed when a script under the 'tasks' or 'actions' directory is executed or sourced. This has the contents of the boostrap.* file in your Glue store","title":"GLUE_BOOTSTRAP"},{"location":"api/#directories","text":"Certain directories have an intrinsic meaning and should be used as such. All directories are a subdirectory of .glue and should be tracked by your VCS","title":"Directories"},{"location":"api/#tasks","text":"The location Glue looks to execute a particular task. Glue also scans this directory to find useAction() annotations","title":"tasks"},{"location":"api/#actions","text":"The location a script in 'tasks' looks to source to perform a more fine-grained action (ex. run eslint ). Glue also scans this directorie to find useConfig() annotations","title":"actions"},{"location":"api/#configs","text":"Where config files are stored. Glue doesn't use this file directly, but it copies its contents because your scripts will likely require configuration","title":"configs"},{"location":"api/#util","text":"Scripts in util contain functionality shared by both scripts in tasks and actions . Glue doesn't use this file directly, but it copies its contents nevertheless","title":"util"},{"location":"api/#output","text":"Any output that your scripts may emit. Since this directory is one of the only ones (besides state ) that is not contained in the Glue store, it should not have an auto subdirectory","title":"output"},{"location":"api/#generated","text":"Any temporary or permanent files your (action) script may emit. Please namespace all of your files under the action script name. For example, generate under tool-shdoc for actions/tool-shdoc.sh","title":"generated"},{"location":"api/#root","text":"This file is only present in the Glue store. All files it contains is copied to the .glue/ directories. Primarily, this is used to house a .gitignore for the generated subdirectory","title":"root"},{"location":"api/#miscellaneous","text":"Most script-writing-gotchia's are due to the fact that the script file can reside in either tasks/auto/script.sh or tasks/script.sh","title":"Miscellaneous"},{"location":"details/","text":"Details For every project you want to use Glue with, a .glue directory is used to contain everything related to Glue: configuration, scripts, and script output. There are two types of scripts: 'command' and 'action'. 'command' scripts can simply be though of the execution of a particular task relating to a programming language. For example: Build Go library or Deploy Node server . Each 'command' script calls out to an 'action' script that does the actual command. For example a script containaing go build . or ansible-playbook playbook.yml . Two categories of scripts exist to increase composability of 'actions' across languages (or even possibly domains!). Lastly, 'command' and 'action' scripts are contained in the .glue/tasks and .glue/actions directories, respectively The following explain the different parts of Glue, in no particular order Architecture The generality of Glue and it's behavior keep the feature set and potential bugs to a minimal, but happens to significantly offload complexity to implementations of actions and tasks scripts. Because Glue is general, you can use any executable to evaluate your scripts (which is specifically why I mention executables having a file extension of .* ). I use Bash, but of course you can use JavaScript, Python etc. In general, interpreted programming languages with dynamic imports and eval facilities should play very nicely. Note that you wouldn't want to install external dependencies with a language-dependent package manger as that would make managing your Glue store significantly more difficult Execution Flow It's important to understand the execution flow of Glue when using the cmd subcommand to run a particular task. The following is an overview When first invoking Glue, it looks for an bootstrap.* file in the Glue store, setting its contents to $GLUE_BOOTSTRAP If a task is specified through the cmd subcommand, it looks for that task in the .glue/tasks , then .glue/tasks/auto directories of your project. If none are found, it displays an error. See Scripts for more details Assuming the task is found, the file is executed, and the $GLUE_BOOTSTRAP , $GLUE_WD , and $GLUE_IS_AUTO variables are passed into the environment. The rest of the execution is now dependent on the user's Glue store Scripts Glue's process of finding and executing scripts makes script-writing easy to extend, modify, and compose. This functionality is only for scripts in the tasks (not actions ) directory. A meta task is a combination of a Project Type, a Task, and a When. Not all components need to be present and not all compositional variations are valid For example # glue cmd [projectType]<.task>[-when] glue cmd NodeJS_Server.build-before NodeJS_Server is the project type, build is the task, and before is the 'when' From this meta task, Glue searches for a script (ex. NodeJS_Server.build-before.sh ) in .glue/tasks/auto . However, if one by the same name is found in .glue/tasks`, it uses that one instead As you can see, script names are nearly identical to the meta task. The following code blocks lists all variations and their semantics # Only task glue cmd build # Runs all 'build' scripts for all projectTypes specified in `build.sh`. # This also runs the generic build script (ex. build.sh) last # And projectType, task glue cmd NodeJS_Server.build # Runs all 'build' scripts for the NodeJS_Server project type. This # also runs the generic build script (ex. build.sh) last # And task, when glue cmd NodeJS_Server-before # Invalid because it doesn't make sense # And projectType, task, when glue cmd NodeJS_Server.ci-before glue cmd NodeJS_Server.ci-only Project Type glue cmd NodeJS_Server.build Runs the 'build' script for the NodeJS_Server projectType When tasks/NodeJS_Server.build-before.sh tasks/NodeJS_Server.build.sh tasks/NodeJS_Server.build-after.sh Optionally add a 'when' to your meta task, which is a hyphen followed by either before , or after . In this example, it builds a NodeJS Server (ex. compiles TypeScript) To execute all three in order: glue cmd NodeJS_Server.build To execute 'NodeJS_Server.build-before.sh` glue cmd NodeJS_Server.build-before.sh To execute only NodeJS_Server.build.sh glue cmd NodeJS_Server.build-only.sh When is super useful if you want to extend the funtionality of a script without changing it For example, consider the following folder structure tasks/auto/NodeJS_Server.build.sh tasks/NodeJS_Server.build-after.sh In this case, Glue will execute NodeJS_Server.build.sh , then NodeJS_Server.build-after.sh . By doing this, you extend the functionality of your build scripts. Note that omitting the 'When' portion would cause only the script in tasks/NodeJS_Server.build.sh to execute Task glue cmd build This performs the build task for every projectType specified in your glue.toml . For example, if in your glue.toml , you have using=[\"NodeJS_Server\", \"Python\"] , it will functionality be the same as the following glue cmd NodeJS_Server.build glue cmd Python.build","title":"Details"},{"location":"details/#details","text":"For every project you want to use Glue with, a .glue directory is used to contain everything related to Glue: configuration, scripts, and script output. There are two types of scripts: 'command' and 'action'. 'command' scripts can simply be though of the execution of a particular task relating to a programming language. For example: Build Go library or Deploy Node server . Each 'command' script calls out to an 'action' script that does the actual command. For example a script containaing go build . or ansible-playbook playbook.yml . Two categories of scripts exist to increase composability of 'actions' across languages (or even possibly domains!). Lastly, 'command' and 'action' scripts are contained in the .glue/tasks and .glue/actions directories, respectively The following explain the different parts of Glue, in no particular order","title":"Details"},{"location":"details/#architecture","text":"The generality of Glue and it's behavior keep the feature set and potential bugs to a minimal, but happens to significantly offload complexity to implementations of actions and tasks scripts. Because Glue is general, you can use any executable to evaluate your scripts (which is specifically why I mention executables having a file extension of .* ). I use Bash, but of course you can use JavaScript, Python etc. In general, interpreted programming languages with dynamic imports and eval facilities should play very nicely. Note that you wouldn't want to install external dependencies with a language-dependent package manger as that would make managing your Glue store significantly more difficult","title":"Architecture"},{"location":"details/#execution-flow","text":"It's important to understand the execution flow of Glue when using the cmd subcommand to run a particular task. The following is an overview When first invoking Glue, it looks for an bootstrap.* file in the Glue store, setting its contents to $GLUE_BOOTSTRAP If a task is specified through the cmd subcommand, it looks for that task in the .glue/tasks , then .glue/tasks/auto directories of your project. If none are found, it displays an error. See Scripts for more details Assuming the task is found, the file is executed, and the $GLUE_BOOTSTRAP , $GLUE_WD , and $GLUE_IS_AUTO variables are passed into the environment. The rest of the execution is now dependent on the user's Glue store","title":"Execution Flow"},{"location":"details/#scripts","text":"Glue's process of finding and executing scripts makes script-writing easy to extend, modify, and compose. This functionality is only for scripts in the tasks (not actions ) directory. A meta task is a combination of a Project Type, a Task, and a When. Not all components need to be present and not all compositional variations are valid For example # glue cmd [projectType]<.task>[-when] glue cmd NodeJS_Server.build-before NodeJS_Server is the project type, build is the task, and before is the 'when' From this meta task, Glue searches for a script (ex. NodeJS_Server.build-before.sh ) in .glue/tasks/auto . However, if one by the same name is found in .glue/tasks`, it uses that one instead As you can see, script names are nearly identical to the meta task. The following code blocks lists all variations and their semantics # Only task glue cmd build # Runs all 'build' scripts for all projectTypes specified in `build.sh`. # This also runs the generic build script (ex. build.sh) last # And projectType, task glue cmd NodeJS_Server.build # Runs all 'build' scripts for the NodeJS_Server project type. This # also runs the generic build script (ex. build.sh) last # And task, when glue cmd NodeJS_Server-before # Invalid because it doesn't make sense # And projectType, task, when glue cmd NodeJS_Server.ci-before glue cmd NodeJS_Server.ci-only","title":"Scripts"},{"location":"details/#project-type","text":"glue cmd NodeJS_Server.build Runs the 'build' script for the NodeJS_Server projectType","title":"Project Type"},{"location":"details/#when","text":"tasks/NodeJS_Server.build-before.sh tasks/NodeJS_Server.build.sh tasks/NodeJS_Server.build-after.sh Optionally add a 'when' to your meta task, which is a hyphen followed by either before , or after . In this example, it builds a NodeJS Server (ex. compiles TypeScript) To execute all three in order: glue cmd NodeJS_Server.build To execute 'NodeJS_Server.build-before.sh` glue cmd NodeJS_Server.build-before.sh To execute only NodeJS_Server.build.sh glue cmd NodeJS_Server.build-only.sh When is super useful if you want to extend the funtionality of a script without changing it For example, consider the following folder structure tasks/auto/NodeJS_Server.build.sh tasks/NodeJS_Server.build-after.sh In this case, Glue will execute NodeJS_Server.build.sh , then NodeJS_Server.build-after.sh . By doing this, you extend the functionality of your build scripts. Note that omitting the 'When' portion would cause only the script in tasks/NodeJS_Server.build.sh to execute","title":"When"},{"location":"details/#task","text":"glue cmd build This performs the build task for every projectType specified in your glue.toml . For example, if in your glue.toml , you have using=[\"NodeJS_Server\", \"Python\"] , it will functionality be the same as the following glue cmd NodeJS_Server.build glue cmd Python.build","title":"Task"},{"location":"reference/","text":"Reference Environment Variables Use these to change the characteristics of how Glue operates GLUE_CONFIG_USER The location of the global Glue configuration file. We comply with the XDG Base Directory specification, defaulting to a location of ~/.config/glue/glue.toml if GLUE_CONFIG_USER is unset or a null string GLUE_CONFIG_LOCAL The location of the local Glue configuration file. By default, it's glue.toml , relative to the current working directory GLUE_STORE The location of your Glue store. This should be set in your Global configuration init.sh file, but you can override it. If no store is specified, the default is ~/.glue-store GLUE_NO_SWITCH_VERSION Do not switch the version of Glue. Usually, you wouldn't want this enabled, but it's useful when debugging Glue itself Configuration for glue.toml There are the parameters used by Glue itself; scripts in your Glue store may read different values from the file storeDir Location of the Glue store. See mine here Example storeDir = \"~/repos/glue-store\" using Array of projectType s to use for the current project. These correspond to the names of files you place in the tasks subdirectory in your Glue store Example using = [\"Bash\", \"Docker\"] Configuration for glue-auto.toml This file is for data that you shouldn't have to manage. This includes version information that is automatically incremented, or will prompt you to increment itself. Like the glue.toml configuration, the following options are only used by Glue ; more may be in use by your Glue store glueVersion The specified version of Glue. When this is specified, and the current version does not match, it will ensure Glue is cloned to \"${XDG_DATA_HOME:-$HOME/.local/share}/glue/repository\" , switch to the correct version, and execute with the same arguments. Valid versions include the full shasum of a Git commit, or a Git tag that represents a release Example glueVersion = 'v0.9.0' # or glueVersion = '2414a21744785efafa2b97bc4137511671f13699'","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#environment-variables","text":"Use these to change the characteristics of how Glue operates","title":"Environment Variables"},{"location":"reference/#glue_config_user","text":"The location of the global Glue configuration file. We comply with the XDG Base Directory specification, defaulting to a location of ~/.config/glue/glue.toml if GLUE_CONFIG_USER is unset or a null string","title":"GLUE_CONFIG_USER"},{"location":"reference/#glue_config_local","text":"The location of the local Glue configuration file. By default, it's glue.toml , relative to the current working directory","title":"GLUE_CONFIG_LOCAL"},{"location":"reference/#glue_store","text":"The location of your Glue store. This should be set in your Global configuration init.sh file, but you can override it. If no store is specified, the default is ~/.glue-store","title":"GLUE_STORE"},{"location":"reference/#glue_no_switch_version","text":"Do not switch the version of Glue. Usually, you wouldn't want this enabled, but it's useful when debugging Glue itself","title":"GLUE_NO_SWITCH_VERSION"},{"location":"reference/#configuration-for-gluetoml","text":"There are the parameters used by Glue itself; scripts in your Glue store may read different values from the file","title":"Configuration for glue.toml"},{"location":"reference/#storedir","text":"Location of the Glue store. See mine here","title":"storeDir"},{"location":"reference/#example","text":"storeDir = \"~/repos/glue-store\"","title":"Example"},{"location":"reference/#using","text":"Array of projectType s to use for the current project. These correspond to the names of files you place in the tasks subdirectory in your Glue store","title":"using"},{"location":"reference/#example_1","text":"using = [\"Bash\", \"Docker\"]","title":"Example"},{"location":"reference/#configuration-for-glue-autotoml","text":"This file is for data that you shouldn't have to manage. This includes version information that is automatically incremented, or will prompt you to increment itself. Like the glue.toml configuration, the following options are only used by Glue ; more may be in use by your Glue store","title":"Configuration for glue-auto.toml"},{"location":"reference/#glueversion","text":"The specified version of Glue. When this is specified, and the current version does not match, it will ensure Glue is cloned to \"${XDG_DATA_HOME:-$HOME/.local/share}/glue/repository\" , switch to the correct version, and execute with the same arguments. Valid versions include the full shasum of a Git commit, or a Git tag that represents a release","title":"glueVersion"},{"location":"reference/#example_2","text":"glueVersion = 'v0.9.0' # or glueVersion = '2414a21744785efafa2b97bc4137511671f13699'","title":"Example"},{"location":"setup/","text":"Setup Both Global and Local configuration have the same file format. Put something in the Global configuration only where it doesn't make sense to put in the local one. User Configuration It is recommended to create a file at ~/.config/glue/glue.toml ( GLUE_CONFIG_USER ), containing the location of your Glue store. The ~ , along with $XDG_CONFIG_HOME and $XDG_DATA_HOME values are interpolated to their environment variable equivalents storeDir = \"~/repos/glue-store\" Local Configuration For every project you wish to manage with Glue , create a glue.toml at the root of the directory. It contains the project types you wish to use. These are ran in order. For example, if you specify glue cmd build , it will first execute ./tasks/NodeJS_Server.build.sh , then ./tasks/Python.build.sh (in addition to potentially executing many other scripts, which isn't important here for brevity's sake) # TODO: make array work using=[\"NodeJS_Server\", \"Python\"]","title":"Setup"},{"location":"setup/#setup","text":"Both Global and Local configuration have the same file format. Put something in the Global configuration only where it doesn't make sense to put in the local one.","title":"Setup"},{"location":"setup/#user-configuration","text":"It is recommended to create a file at ~/.config/glue/glue.toml ( GLUE_CONFIG_USER ), containing the location of your Glue store. The ~ , along with $XDG_CONFIG_HOME and $XDG_DATA_HOME values are interpolated to their environment variable equivalents storeDir = \"~/repos/glue-store\"","title":"User Configuration"},{"location":"setup/#local-configuration","text":"For every project you wish to manage with Glue , create a glue.toml at the root of the directory. It contains the project types you wish to use. These are ran in order. For example, if you specify glue cmd build , it will first execute ./tasks/NodeJS_Server.build.sh , then ./tasks/Python.build.sh (in addition to potentially executing many other scripts, which isn't important here for brevity's sake) # TODO: make array work using=[\"NodeJS_Server\", \"Python\"]","title":"Local Configuration"},{"location":"tasks/","text":"Tasks sync Copies files from the Glue store to the current project's .glue folder. First, it removes every file and foldler under all auto directories. Then, it copies all files and folders under util . Next, it copies tasks scripts that match all projectTypes specified in glue.toml . Lastly, it copies files and directories specified with useAction(...) and useConfig(...) annotations list print act Executes a particular script under actions . Specify the actionFile directly, without the extension cmd Executes a particular script under tasks . Specify a metaTask to match a particular set of files","title":"Tasks"},{"location":"tasks/#tasks","text":"","title":"Tasks"},{"location":"tasks/#sync","text":"Copies files from the Glue store to the current project's .glue folder. First, it removes every file and foldler under all auto directories. Then, it copies all files and folders under util . Next, it copies tasks scripts that match all projectTypes specified in glue.toml . Lastly, it copies files and directories specified with useAction(...) and useConfig(...) annotations","title":"sync"},{"location":"tasks/#list","text":"","title":"list"},{"location":"tasks/#print","text":"","title":"print"},{"location":"tasks/#act","text":"Executes a particular script under actions . Specify the actionFile directly, without the extension","title":"act"},{"location":"tasks/#cmd","text":"Executes a particular script under tasks . Specify a metaTask to match a particular set of files","title":"cmd"},{"location":"explanations/glue-version-switch/","text":"Glue Version Switch When Glue starts, it will attempt to switch to the version of Glue specified in glue-auto.toml It does this by managing two sets of Glue repositories. One called repository and another called versions , which are both in \"${XDG_DATA_HOME:-$HOME/.local/share}/glue\" repository This directory contains the full history of Glue . Every Glue switches versions, it will update this repository to the latest possible version versions This directory contains subdirectories of different Glue versions. For each unique version specified in a particular glue.toml file, there will be a corresponding version in this directory. In this directory, the repositories are cloned with --depth=1 to minimize its size","title":"Glue Version Switch"},{"location":"explanations/glue-version-switch/#glue-version-switch","text":"When Glue starts, it will attempt to switch to the version of Glue specified in glue-auto.toml It does this by managing two sets of Glue repositories. One called repository and another called versions , which are both in \"${XDG_DATA_HOME:-$HOME/.local/share}/glue\"","title":"Glue Version Switch"},{"location":"explanations/glue-version-switch/#repository","text":"This directory contains the full history of Glue . Every Glue switches versions, it will update this repository to the latest possible version","title":"repository"},{"location":"explanations/glue-version-switch/#versions","text":"This directory contains subdirectories of different Glue versions. For each unique version specified in a particular glue.toml file, there will be a corresponding version in this directory. In this directory, the repositories are cloned with --depth=1 to minimize its size","title":"versions"}]}