#!/usr/bin/env bash
set -Eo pipefail
shopt -s extglob

source "$PROGRAM_LIB_DIR/util/util.sh" || { echo "Error: Could not source file"; exit 1; }
source "$PROGRAM_LIB_DIR/util/get.sh" || util.source_error
source "$PROGRAM_LIB_DIR/util/init.sh" || util.source_error
source "$PROGRAM_LIB_DIR/util/log.sh" || util.source_error
source "$PROGRAM_LIB_DIR/do.sh" || util.source_error
source "$PROGRAM_LIB_DIR/helper.sh" || util.source_error

# shellcheck disable=SC2034
declare PROGRAM_VERSION="0.8.0+50fdc8f-DIRTY"

# Set the working directory for this shell
set.wd
declare GLUE_WD="$PWD"

main() {
	# Ensure we are using the correct version of Glue, specified in `glue-auto.toml`
	util.get_toml_string "$GLUE_WD/glue-auto.toml" 'glueVersion'
	local glueVersion="$REPLY"

	# shellcheck disable=SC1007
	local actualGlueVersionGit= actualGlueVersion=
	if [ -d "$PROGRAM_LIB_DIR/../../.git" ]; then
		cd "$PROGRAM_LIB_DIR/../../.git"
		# TODO: Information about current Git repository should be autogenerated
		actualGlueVersionGit="$(git rev-parse HEAD)"
		cd "$GLUE_WD"
	fi
	actualGlueVersion="${PROGRAM_VERSION%*:}"
	actualGlueVersion="${actualGlueVersion%"${actualGlueVersion##*[![:space:]]}"}"

	if
		[[ -n "$actualGlueVersionGit" && "$glueVersion" != "$actualGlueVersionGit" ]] \
			&& [ "$glueVersion" != "$actualGlueVersion" ]
		then
			log.info 'Executing Glue from the managed repository'
			local versionDir="${XDG_DATA_HOME:-$HOME/.local/share}/glue/repository"
			if [ ! -d "$versionDir" ]; then
				mkdir -p "$versionDir"
				git -C "$versionDir" clone 'https://github.com/eankeen/glue' .
			fi

			git -C "$versionDir" switch "$glueVersion" >/dev/null 2>&1
			source "$versionDir/pkg/bin/glue" "$@"
	fi

	util.get_config_string 'storeDir'
	GLUE_STORE="${GLUE_STORE:-${REPLY:-$HOME/.glue-store}}"

	util.get_config_array 'using'
	# shellcheck disable=SC2034
	IFS=' ' read -ra GLUE_USING <<< "${REPLIES[@]}"


	# ------------------------- Main ------------------------- #
	declare -A args=()
	source args.parse "$@" <<-"EOF"
	@flag [help.h] - Show help
	@flag [version.v] - Show version
	@arg sync - Sync changes from the Glue store to the current project. This overrides and replaces the content in 'auto' directories
	@arg list - Lists all projectTypes of the current project
	@arg print - Prints the script about to be executed
	@arg act - Executes an action
	@arg cmd - Execute a meta task (command)
	EOF

	if [[ "${args[help]}" = yes ]]; then
		echo "$argsHelpText"
		exit
	fi

	if [[ "${args[version]}" = yes ]]; then
		cat <<-EOF
		Version: $PROGRAM_VERSION
		EOF
		exit
	fi

	# shellcheck disable=SC2154
	case "${argsCommands[0]}" in
		sync)
			doSync "$@"
			;;
		list)
			doList "$@"
			;;
		print)
			doPrint "$@"
			;;
		act)
			doAct "$@"
			;;
		cmd)
			doCmd "$@"
			;;
		*)
			log.error "Subcommand '${argsCommands[0]}' does not exist"
			if [ -n "$argsHelpText" ]; then
				echo "$argsHelpText"
			fi
			exit 1
	esac
}

main "$@"
